# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  # Event `pull_request`: Compare the last commit of the main branch or last remote commit of the PR branch -> to the current commit of a PR branch.
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  changed_files:
    runs-on: ubuntu-latest
    name: Check Added Changed Files
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Get All file added or change during last commit
      - name: Get added or changed files
        id: added-changed-files
        uses: tj-actions/changed-files@v39
        with:
          separator: ","

      - name: List all Added or Changed files
        run: |
          for file in ${{ steps.added-changed-files.outputs.added_files }}; do
            echo "$file was added"
          done

      # Get All YAML files added in http.proxy folder
      - name: Get YAML files added in http.proxy folder
        id: added-files-in-proxy
        uses: tj-actions/changed-files@v39
        with:
          files: http.proxy/*.yaml
          separator: ","

      - name: Run step if any file(s) added in http.proxy folder
        if: steps.added-files-in-proxy.outputs.any_changed == 'true'
        run: |
          echo "One or more files added in http.proxy folder"
          echo "List all the files that have been added : ${{ steps.added-files-in-proxy.outputs.all_changed_files}}"

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Execure Python script
      - name: Run Python Script
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          pip install PyYAML
          pip install kubernetes

      - name: Create record on Cloudflare
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import os
            import yaml
            from kubernetes import client, config, dynamic
            from kubernetes.client import api_client

            files = str('${{ steps.added-files-in-proxy.outputs.all_changed_files}}').split(",")
            print(files)

            for f in files:
              with open(f, 'r') as stream:
                try:
                  content = yaml.safe_load(stream)
                  fqdn = content["spec"]["virtualhost"]["fqdn"]
                  proxied = True

                  client = dynamic.DynamicClient(api_client.ApiClient(configuration=config.load_kube_config(config_file='./http.proxy/configuration.yaml')))
                  api = client.resources.get(api_version="dns.cloudflare.crossplane.io/v1alpha1", kind="Record")
                  name = fqdn
                  record_manifest = {
                      "apiVersion": "dns.cloudflare.crossplane.io/v1alpha1",
                      "kind": "Record",
                      "metadata": {
                          "name": fqdn
                      },
                      "spec": {
                          "forProvider": {
                              "content": "nlb.zodexchange.co.",
                              "name": fqdn,
                              "proxied": proxied,
                              "type": "CNAME",
                              "zone": "7ea9fe1045447b31a338fbae6a1cfce9",
                              "zoneSelector": {
                                  "matchLabels": {
                                      "identifier": "dns-record"
                                  }
                              }
                          },
                          "providerConfigRef": {
                              "name": "zodexchange.co"
                          }
                      }
                  }
                  record = api.create(body=record_manifest, namespace='default')
                  
                except yaml.YAMLError as exc:
                  print(exc)
